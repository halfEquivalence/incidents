#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('incidents:server');
const http = require('http');
const db = require('../db');

const PORT = normalizePort(process.env.PORT || '3000');

/**
 * Normalize a PORT into a number, string, or false.
 */

function normalizePort(val) {
  const PORT = parseInt(val, 10);

  if (isNaN(PORT)) {
    // named pipe
    return val;
  }

  if (PORT >= 0) {
    // PORT number
    return PORT;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(addr) {
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'PORT ' + addr.PORT;
  debug('Listening on ' + bind);
}

db.connect().then(() => {
  const server = http.createServer(app());
  server
    .listen(PORT)
    .on('error', onError)
    .on('listening', () => onListening(server.address()));
});
